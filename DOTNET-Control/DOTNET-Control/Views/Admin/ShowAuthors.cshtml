@model IEnumerable<DOTNET_Control.Models.Author>

@{
    ViewData["Title"] = "Authors";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="page-breadcrumb d-none d-sm-flex align-items-center mb-3">
    <div class="breadcrumb-title pe-3">Library</div>
    <div class="ps-3">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0 p-0">
                <li class="breadcrumb-item">
                    <a href="javascript:;"><i class="bx bx-home-alt"></i></a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">Authors List</li>
            </ol>
        </nav>
    </div>
</div>

<div class="card">
    <div class="card-header py-3">
        <div class="row align-items-center m-0">
            <div class="col-md-3 col-12 me-auto mb-md-0 mb-3">
                <h5 class="mb-0">Authors</h5>
            </div>
            <div class="col-lg-3 col-xl-2">
                <button type="button" class="btn btn-primary mb-3 mb-lg-0" onclick="showCreateModal()">
                    <i class="bi bi-plus-square-fill"></i> Add Author
                </button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table align-middle table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Books Count</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!Model.Any())
                    {
                        <tr>
                            <td colspan="3" class="text-center">No authors available.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var author in Model)
                        {
                            <tr>
                                <td>@author.Name</td>
                                <td>@author.Books?.Count</td>
                                <td>
                                    <div class="d-flex align-items-center gap-3 fs-6">
                                        <a href="javascript:;" class="text-primary"
                                           onclick="viewAuthor(this)"
                                           data-name="@author.Name"
                                           data-books="@string.Join(", ", author.Books?.Select(b => b.Title) ?? new List<string>())"
                                           data-bs-toggle="tooltip"
                                           data-bs-placement="bottom"
                                           title="View detail">
                                            <i class="bi bi-eye-fill"></i>
                                        </a>
                                        <a href="javascript:;" class="text-warning"
                                           onclick="editAuthor(this)"
                                           data-id="@author.Id"
                                           data-name="@author.Name"
                                           data-bs-toggle="tooltip"
                                           data-bs-placement="bottom"
                                           title="Edit info">
                                            <i class="bi bi-pencil-fill"></i>
                                        </a>
                                        <a href="javascript:;" class="text-danger"
                                           onclick="confirmDelete(@author.Id, `@author.Name`)"
                                           data-bs-toggle="tooltip"
                                           data-bs-placement="bottom"
                                           title="Delete">
                                            <i class="bi bi-trash-fill"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- View Author Modal -->
<div class="modal fade" id="viewAuthorModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title fw-bold">
                    <i class="bi bi-person me-2"></i>Author Details
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="bg-light p-3 rounded mb-3">
                    <h4 class="text-primary mb-3" id="viewName"></h4>
                    <hr class="my-2">
                    <h6 class="text-muted mb-2">Books:</h6>
                    <p class="mb-0" id="viewBooks"></p>
                </div>
                <div class="text-end">
                    <button type="button" class="btn btn-outline-primary px-4" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-2"></i>Close
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Author Modal -->
<div class="modal fade" id="createAuthorModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title fw-bold">
                    <i class="bi bi-person-plus me-2"></i>Create Author
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createAuthorForm">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" id="createName" name="Name" class="form-control" required>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Create Author</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Author Modal -->
<div class="modal fade" id="editAuthorModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Author</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editAuthorForm">
                    <input type="hidden" id="editAuthorId" name="Id" />
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" id="editName" name="Name" class="form-control" required>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    function showCreateModal() {
        document.getElementById('createName').value = '';
        new bootstrap.Modal(document.getElementById('createAuthorModal')).show();
    }

    function confirmDelete(id, name) {
        Swal.fire({
            title: 'Are you sure?',
            text: `Do you want to delete "${name}"?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`DeleteAuthor/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => {
                    if (response.ok) {
                        Swal.fire(
                            'Deleted!',
                            'The author has been deleted.',
                            'success'
                        ).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire(
                            'Error!',
                            'Something went wrong.',
                            'error'
                        );
                    }
                });
            }
        });
    }

    function viewAuthor(element) {
        document.getElementById('viewName').textContent = element.getAttribute('data-name');
        document.getElementById('viewBooks').textContent = element.getAttribute('data-books') || 'No books available';
        new bootstrap.Modal(document.getElementById('viewAuthorModal')).show();
    }

    function editAuthor(element) {
        document.getElementById('editAuthorId').value = element.getAttribute('data-id');
        document.getElementById('editName').value = element.getAttribute('data-name');
        new bootstrap.Modal(document.getElementById('editAuthorModal')).show();
    }

    document.getElementById('createAuthorForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        const authorData = Object.fromEntries(formData);

        fetch('/Admin/CreateAuthor', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
    },
    body: JSON.stringify(authorData)
})
.then(response => {
    if (response.ok) {
        Swal.fire(
            'Created!',
            'The author has been created successfully.',
            'success'
        ).then(() => {
            window.location.reload();
        });
    } else {
        Swal.fire(
            'Error!',
            'Something went wrong.',
            'error'
        );
    }
});

    });

    document.getElementById('editAuthorForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        const authorData = Object.fromEntries(formData);

            fetch('EditAuthor', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(authorData)
    })
    .then(response => {
        if (response.ok) {
            Swal.fire(
                'Updated!',
                'The author has been updated successfully.',
                'success'
            ).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire(
                'Error!',
                'Something went wrong.',
                'error'
            );
        }
    });

    });
</script>